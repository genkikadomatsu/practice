class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        
        result = []

        for i in range(len(intervals)):

            # insert case
            if newInterval[1] < intervals[i][0]:
                result.append(newInterval)
                return result + intervals[i:]
            
            # continue case
            elif newInterval[0] > intervals[i][1]:
                result.append(intervals[i])

            # merge case (reassign new interval, skip append)
            else:
                newInterval = [
                    min(newInterval[0], intervals[i][0]),
                    max(newInterval[1], intervals[i][1])
                ]

        result.append(newInterval)
        return result
            


# 12/21/22
# LeetCode 57
class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:

        if not intervals:
            return [[newInterval]]
            
        newIntervals = []

        for oldInterval in intervals:

            
            # merge case
            if newInterval[0] <= oldInterval[1] and newInterval[1] >= oldInterval[0]:
                newInterval = [
                    min(newInterval[0], oldInterval[0]),
                    max(newInterval[1], oldInterval[1])
                ]

            # insert case
            elif newInterval[0] < oldInterval[0] and newInterval[1] < oldInterval[0]:
                newIntervals.append(newInterval)
                newIntervals.append(oldInterval)

            # other cases
            else:
                newIntervals.append(oldInterval)

        return newIntervals